#!/usr/bin/env python3
"""
–ï–¥–∏–Ω—ã–π —Ç–µ—Å—Ç –∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ Notion Article Finder
–û–±—ä–µ–¥–∏–Ω—è–µ—Ç –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ë–î –∏ –ø–æ–ª–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞
"""

from notion_article_finder import NotionArticleFinder
from config import NOTION_TOKEN, DATABASE_ID
import requests
import os

def diagnose_database_structure():
    """–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    
    print("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –°–¢–†–£–ö–¢–£–†–´ –ë–ê–ó–´ –î–ê–ù–ù–´–•")
    print("-" * 50)
    
    headers = {
        "Authorization": f"Bearer {NOTION_TOKEN}",
        "Content-Type": "application/json",
        "Notion-Version": "2022-06-28"
    }
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        url = f"https://api.notion.com/v1/databases/{DATABASE_ID}"
        response = requests.get(url, headers=headers)
        response.raise_for_status()
        
        data = response.json()
        db_title = data.get('title', [{}])[0].get('text', {}).get('content', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        print(f"‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {db_title}")
        print(f"‚úÖ ID: {data.get('id')}")
        print()
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—è
        properties = data.get('properties', {})
        print("üìã –ü–æ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:")
        
        required_fields = {'Date': False, 'Name': False, 'URL': False}
        
        for prop_name, prop_info in properties.items():
            prop_type = prop_info.get('type', 'unknown')
            print(f"   - {prop_name}: {prop_type}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω—É–∂–Ω—ã–µ –ø–æ–ª—è
            if prop_name == 'Date' and prop_type == 'date':
                required_fields['Date'] = True
                print(f"     ‚úÖ –ü–æ–ª–µ –¥–∞—Ç—ã –Ω–∞–π–¥–µ–Ω–æ")
            elif prop_name == 'Name' and prop_type == 'title':
                required_fields['Name'] = True
                print(f"     ‚úÖ –ü–æ–ª–µ –Ω–∞–∑–≤–∞–Ω–∏–π –Ω–∞–π–¥–µ–Ω–æ")
            elif prop_name == 'URL' and prop_type == 'url':
                required_fields['URL'] = True
                print(f"     ‚úÖ –ü–æ–ª–µ URL –Ω–∞–π–¥–µ–Ω–æ")
        
        print()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –Ω—É–∂–Ω—ã—Ö –ø–æ–ª–µ–π
        missing_fields = [field for field, found in required_fields.items() if not found]
        if missing_fields:
            print(f"‚ö†Ô∏è  –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–æ–ª—è: {', '.join(missing_fields)}")
            print("   –≠—Ç–æ –º–æ–∂–µ—Ç –ø–æ–≤–ª–∏—è—Ç—å –Ω–∞ —Ä–∞–±–æ—Ç—É —Å–∫—Ä–∏–ø—Ç–∞")
        else:
            print("‚úÖ –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–æ–ª—è –Ω–∞–π–¥–µ–Ω—ã!")
        
        return True, required_fields
        
    except requests.exceptions.RequestException as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        if hasattr(e, 'response') and e.response is not None:
            print(f"   –°—Ç–∞—Ç—É—Å –∫–æ–¥: {e.response.status_code}")
            print(f"   –û—Ç–≤–µ—Ç: {e.response.text}")
        return False, {}

def test_api_connection():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API"""
    
    print("\nüîå –¢–ï–°–¢ –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø –ö API")
    print("-" * 50)
    
    headers = {
        "Authorization": f"Bearer {NOTION_TOKEN}",
        "Content-Type": "application/json",
        "Notion-Version": "2022-06-28"
    }
    
    try:
        # –ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å
        url = f"https://api.notion.com/v1/databases/{DATABASE_ID}/query"
        query_data = {"page_size": 1}
        
        response = requests.post(url, headers=headers, json=query_data)
        
        if response.status_code == 200:
            data = response.json()
            results = data.get('results', [])
            print(f"‚úÖ API –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {len(results)}")
            
            if results:
                print("‚úÖ –ï—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
                return True, results[0]
            else:
                print("‚ö†Ô∏è  –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç–∞")
                return True, None
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ API: {response.status_code}")
            print(f"   –û—Ç–≤–µ—Ç: {response.text}")
            return False, None
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
        return False, None

def test_article_search():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∏—Å–∫–∞ —Å—Ç–∞—Ç–µ–π"""
    
    print("\nüìä –¢–ï–°–¢ –ü–û–ò–°–ö–ê –°–¢–ê–¢–ï–ô")
    print("-" * 50)
    
    finder = NotionArticleFinder(NOTION_TOKEN, DATABASE_ID)
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∏–∞–ø–∞–∑–æ–Ω—ã –¥–∞—Ç
    test_ranges = [
        {
            "name": "–®–∏—Ä–æ–∫–∏–π –¥–∏–∞–ø–∞–∑–æ–Ω (2024-2025)",
            "start": "2024-01-01",
            "end": "2025-12-31"
        },
        {
            "name": "–û–∫—Ç—è–±—Ä—å 2025",
            "start": "2025-10-01",
            "end": "2025-10-31"
        },
        {
            "name": "1-3 –æ–∫—Ç—è–±—Ä—è 2025",
            "start": "2025-10-01",
            "end": "2025-10-03"
        }
    ]
    
    successful_tests = []
    
    for i, test_range in enumerate(test_ranges, 1):
        print(f"\n{i}. {test_range['name']}")
        print(f"   –ü–µ—Ä–∏–æ–¥: {test_range['start']} - {test_range['end']}")
        
        try:
            articles = finder.search_articles_by_date(test_range['start'], test_range['end'])
            
            if articles:
                print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω–æ —Å—Ç–∞—Ç–µ–π: {len(articles)}")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 2 —Å—Ç–∞—Ç—å–∏
                for j, article in enumerate(articles[:2], 1):
                    page_id = article["id"]
                    page_url = f"https://notion.so/{page_id.replace('-', '')}"
                    print(f"      {j}. {page_url}")
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∞—Ç—É
                    date_prop = article.get('properties', {}).get('Date', {})
                    date_value = date_prop.get('date', '–ù–µ—Ç –¥–∞—Ç—ã')
                    print(f"         –î–∞—Ç–∞: {date_value}")
                
                if len(articles) > 2:
                    print(f"      ... –∏ –µ—â–µ {len(articles) - 2} —Å—Ç–∞—Ç–µ–π")
                
                test_range['articles'] = articles
                test_range['status'] = 'success'
                successful_tests.append(test_range)
                
            else:
                print(f"   ‚ö†Ô∏è  –°—Ç–∞—Ç—å–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                test_range['status'] = 'no_articles'
                
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
            test_range['status'] = 'error'
            test_range['error'] = str(e)
    
    return successful_tests

def test_data_extraction(articles):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö"""
    
    print("\nüìù –¢–ï–°–¢ –ò–ó–í–õ–ï–ß–ï–ù–ò–Ø –î–ê–ù–ù–´–•")
    print("-" * 50)
    
    finder = NotionArticleFinder(NOTION_TOKEN, DATABASE_ID)
    
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–∞—Ç—å—è—Ö
        articles_info = finder.extract_articles_info(articles)
        
        print(f"‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ!")
        print(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å—Ç–∞—Ç–µ–π: {len(articles_info)}")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        titles_found = sum(1 for a in articles_info if a['title'] != '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
        urls_found = sum(1 for a in articles_info if a['article_url'] != '–ù–µ—Ç URL')
        
        print(f"\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è:")
        print(f"   - –ù–∞–∑–≤–∞–Ω–∏—è: {titles_found}/{len(articles_info)} ({titles_found/len(articles_info)*100:.1f}%)")
        print(f"   - URL —Å—Ç–∞—Ç–µ–π: {urls_found}/{len(articles_info)} ({urls_found/len(articles_info)*100:.1f}%)")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 —Å—Ç–∞—Ç—å–∏
        print(f"\nüìã –ü—Ä–∏–º–µ—Ä—ã –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:")
        for i, article in enumerate(articles_info[:3], 1):
            print(f"\n{i}. –ù–∞–∑–≤–∞–Ω–∏–µ: {article['title']}")
            print(f"   URL —Å—Ç–∞—Ç—å–∏: {article['article_url']}")
            print(f"   Notion URL: {article['notion_url']}")
        
        if len(articles_info) > 3:
            print(f"\n... –∏ –µ—â–µ {len(articles_info) - 3} —Å—Ç–∞—Ç–µ–π")
        
        return articles_info, titles_found, urls_found
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        import traceback
        traceback.print_exc()
        return [], 0, 0

def test_csv_export(articles_info):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ CSV"""
    
    print("\nüíæ –¢–ï–°–¢ –≠–ö–°–ü–û–†–¢–ê –í CSV")
    print("-" * 50)
    
    if not articles_info:
        print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞")
        return False
    
    try:
        finder = NotionArticleFinder(NOTION_TOKEN, DATABASE_ID)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ CSV
        csv_file = "unified_test_results.csv"
        finder.save_articles_to_file(articles_info, csv_file)
        
        print(f"‚úÖ CSV —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω: {csv_file}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª
        if os.path.exists(csv_file):
            file_size = os.path.getsize(csv_file)
            print(f"‚úÖ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {file_size} –±–∞–π—Ç")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ —Å—Ç—Ä–æ–∫–∏
            with open(csv_file, 'r', encoding='utf-8') as f:
                lines = f.readlines()
                print(f"‚úÖ –°—Ç—Ä–æ–∫ –≤ —Ñ–∞–π–ª–µ: {len(lines)}")
                print(f"‚úÖ –ó–∞–≥–æ–ª–æ–≤–∫–∏: {lines[0].strip()}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ: {e}")
        return False

def check_data_quality(articles_info):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö"""
    
    print("\nüîç –ü–†–û–í–ï–†–ö–ê –ö–ê–ß–ï–°–¢–í–ê –î–ê–ù–ù–´–•")
    print("-" * 50)
    
    if not articles_info:
        print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏")
        return
    
    quality_issues = []
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è
    empty_titles = [a for a in articles_info if a['title'] == '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è']
    if empty_titles:
        quality_issues.append(f"–°—Ç–∞—Ç–µ–π –±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏–π: {len(empty_titles)}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º URL —Å—Ç–∞—Ç–µ–π
    empty_urls = [a for a in articles_info if a['article_url'] == '–ù–µ—Ç URL']
    if empty_urls:
        quality_issues.append(f"–°—Ç–∞—Ç–µ–π –±–µ–∑ URL: {len(empty_urls)}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É –Ω–∞–∑–≤–∞–Ω–∏–π
    short_titles = [a for a in articles_info if len(a['title']) < 10]
    if short_titles:
        quality_issues.append(f"–ö–æ—Ä–æ—Ç–∫–∏—Ö –Ω–∞–∑–≤–∞–Ω–∏–π (<10 —Å–∏–º–≤–æ–ª–æ–≤): {len(short_titles)}")
    
    if quality_issues:
        print("‚ö†Ô∏è  –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã –∫–∞—á–µ—Å—Ç–≤–∞:")
        for issue in quality_issues:
            print(f"   - {issue}")
    else:
        print("‚úÖ –ö–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö –æ—Ç–ª–∏—á–Ω–æ–µ!")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –µ–¥–∏–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞"""
    
    print("=" * 60)
    print("üîç –ï–î–ò–ù–´–ô –¢–ï–°–¢ –ò –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê NOTION ARTICLE FINDER")
    print("=" * 60)
    print(f"–¢–æ–∫–µ–Ω: {NOTION_TOKEN[:10]}...")
    print(f"Database ID: {DATABASE_ID}")
    print()
    
    # –®–∞–≥ 1: –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ë–î
    db_ok, required_fields = diagnose_database_structure()
    if not db_ok:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ–∫–µ–Ω –∏ ID.")
        return
    
    # –®–∞–≥ 2: –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API
    api_ok, sample_record = test_api_connection()
    if not api_ok:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ API. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ–∫–µ–Ω.")
        return
    
    # –®–∞–≥ 3: –¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ —Å—Ç–∞—Ç–µ–π
    successful_tests = test_article_search()
    if not successful_tests:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å—Ç–∞—Ç—å–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç.")
        return
    
    # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π —É—Å–ø–µ—à–Ω—ã–π —Ç–µ—Å—Ç
    test_case = successful_tests[0]
    articles = test_case['articles']
    
    # –®–∞–≥ 4: –¢–µ—Å—Ç –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
    articles_info, titles_found, urls_found = test_data_extraction(articles)
    if not articles_info:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å—Ç–∞—Ç–µ–π.")
        return
    
    # –®–∞–≥ 5: –¢–µ—Å—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ CSV
    export_ok = test_csv_export(articles_info)
    
    # –®–∞–≥ 6: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö
    check_data_quality(articles_info)
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print("\n" + "=" * 60)
    print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢")
    print("=" * 60)
    
    print(f"‚úÖ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ë–î: {'–£—Å–ø–µ—à–Ω–æ' if db_ok else '–û—à–∏–±–∫–∞'}")
    print(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ API: {'–£—Å–ø–µ—à–Ω–æ' if api_ok else '–û—à–∏–±–∫–∞'}")
    print(f"‚úÖ –ü–æ–∏—Å–∫ —Å—Ç–∞—Ç–µ–π: {len(successful_tests)} —É—Å–ø–µ—à–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤")
    print(f"‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö: {len(articles_info)} —Å—Ç–∞—Ç–µ–π")
    print(f"‚úÖ –≠–∫—Å–ø–æ—Ä—Ç CSV: {'–£—Å–ø–µ—à–Ω–æ' if export_ok else '–û—à–∏–±–∫–∞'}")
    
    if articles_info:
        print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        print(f"   - –ù–∞–∑–≤–∞–Ω–∏—è: {titles_found}/{len(articles_info)} ({titles_found/len(articles_info)*100:.1f}%)")
        print(f"   - URL —Å—Ç–∞—Ç–µ–π: {urls_found}/{len(articles_info)} ({urls_found/len(articles_info)*100:.1f}%)")
        print(f"   - –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: unified_test_results.csv")
    
    print("\nüéâ –ï–¥–∏–Ω—ã–π —Ç–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!")

if __name__ == "__main__":
    main()
